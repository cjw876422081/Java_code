package Second_week;

import java.util.Scanner;

/*1.题目内容：
UTC 是世界协调时，BJT 是北京时间，UTC 时间相当于BJT 减去8。现在，你的程序要
读入一个整数，表示BJT 的时和分。整数的个位和十位表示分，百位和千位表示小时。如
果小时小于10，则没有千位部分；如果小时是0，则没有百位部分；如果分小于10 分，
需要保留十位上的0。如1124 表示11 点24 分，而905 表示9 点5 分，36 表示0
点36 分，7 表示0 点7 分。
有效的输入范围是0 到2359，即你的程序不可能从测试服务器读到0 到2359 以外的输
入数据。
你的程序要输出这个时间对应的UTC 时间，输出的格式和输入的相同，即输出一个整数，
表示UTC 的时和分。整数的个位和十位表示分，百位和千位表示小时。如果小时小于10，
则没有千位部分；如果小时是0，则没有百位部分；如果分小于10 分，需要保留十位上的
0。
提醒：要小心跨日的换算。
输入格式:
一个整数，表示BJT 的时和分。整数的个位和十位表示分，百位和千位表示小时。如果小
时小于10，则没有千位部分；如果小时是0，则没有百位部分；如果分小于10 分，需要
保留十位上的0。
输出格式：
一个整数，表示UTC 的时和分。整数的个位和十位表示分，百位和千位表示小时。如果小
时小于10，则没有千位部分；如果小时是0，则没有百位部分；如果分小于10 分，需要
保留十位上的0。
输入样例：
903
输出样例：
103*/
public class Test_1 {

	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		int BJT = sc.nextInt() ; 
		
		if( (BJT / 100 ) >= 8 )
		{
			System.out.println(BJT - 800 );
		}
		else
		{
			System.out.println(BJT + 1600);
		}

	}

}
